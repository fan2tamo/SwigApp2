//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CppClass : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CppClass(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CppClass obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CppClass() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MyDLLPINVOKE.delete_CppClass(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public void SetString(string str) {
    MyDLLPINVOKE.CppClass_SetString(swigCPtr, str);
    if (MyDLLPINVOKE.SWIGPendingException.Pending) throw MyDLLPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetString() {
    string ret = MyDLLPINVOKE.CppClass_GetString(swigCPtr);
    return ret;
  }

  public void SetVector(FloatVector fVect) {
    MyDLLPINVOKE.CppClass_SetVector(swigCPtr, FloatVector.getCPtr(fVect));
    if (MyDLLPINVOKE.SWIGPendingException.Pending) throw MyDLLPINVOKE.SWIGPendingException.Retrieve();
  }

  public FloatVector GetVector() {
    FloatVector ret = new FloatVector(MyDLLPINVOKE.CppClass_GetVector(swigCPtr), true);
    return ret;
  }

  public void SetCallback(CallbackBase callbackObject) {
    MyDLLPINVOKE.CppClass_SetCallback(swigCPtr, CallbackBase.getCPtr(callbackObject));
    if (MyDLLPINVOKE.SWIGPendingException.Pending) throw MyDLLPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ExeCallback() {
    MyDLLPINVOKE.CppClass_ExeCallback(swigCPtr);
  }

  public CppClass() : this(MyDLLPINVOKE.new_CppClass(), true) {
  }

}
